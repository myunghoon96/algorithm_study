#모든 레코드 조회하기
SELECT * 
FROM ANIMAL_INS 
ORDER by ANIMAL_ID;

#아픈 동물 찾기
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS 
WHERE INTAKE_CONDITION = 'Sick' 
ORDER BY ANIMAL_ID;

#어린 동물 찾기
SELECT ANIMAL_ID, NAME 
FROM ANIMAL_INS 
WHERE INTAKE_CONDITION !='Aged' 
ORDER BY ANIMAL_ID;

#여러 기준으로 정렬하기
SELECT ANIMAL_ID, NAME, DATETIME 
FROM ANIMAL_INS 
ORDER BY NAME ASC, DATETIME DESC;

#상위 n개 레코드
SELECT NAME 
FROM ANIMAL_INS 
ORDER BY DATETIME 
LIMIT 1;

SELECT NAME
FROM (SELECT * 
FROM ANIMAL_INS 
ORDER BY DATETIME) 
WHERE ROWNUM < 2;

#최댓값 구하기
SELECT MAX(DATETIME) AS "시간" 
FROM ANIMAL_INS;

#최솟값 구하기
SELECT MIN(DATETIME) 
FROM ANIMAL_INS;

#동물 수 구하기
SELECT COUNT(*) 
FROM ANIMAL_INS;

#중복 제거하기
SELECT COUNT(DISTINCT NAME) AS "COUNT" 
FROM ANIMAL_INS 
WHERE NAME IS NOT NULL;

#고양이와 개는 몇 마리 있을까
SELECT ANIMAL_TYPE, COUNT(*) 
FROM ANIMAL_INS 
GROUP BY ANIMAL_TYPE 
ORDER BY ANIMAL_TYPE;

#동명 동물 수 찾기
SELECT NAME, COUNT(NAME)
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
GROUP BY NAME
HAVING COUNT(NAME)>=2
ORDER BY NAME;

#입양 시각 구하기(1)
SELECT HOUR(DATETIME) AS "HOUR", COUNT(DATETIME) AS "COUNT"
FROM ANIMAL_OUTS
GROUP BY HOUR
HAVING HOUR>=9 AND HOUR<=19
ORDER BY HOUR;

SELECT TO_CHAR(DATETIME,'HH24') AS HOUR, COUNT(*) AS COUNT
FROM ANIMAL_OUTS 
WHERE TO_CHAR(DATETIME,'HH24') BETWEEN 09 AND 19
GROUP BY TO_CHAR(DATETIME,'HH24')
ORDER BY TO_CHAR(DATETIME,'HH24');

#입양 시각 구하기(2)
SET @HOUR := -1;
SELECT (@HOUR := @HOUR+1) AS "HOUR", 
(SELECT COUNT(DATETIME) AS "COUNT" FROM ANIMAL_OUTS WHERE @HOUR = HOUR(DATETIME))
FROM ANIMAL_OUTS
WHERE @HOUR <= 22;

SELECT HOUR, COUNT(O.DATETIME) AS COUNT
FROM
(
    SELECT LEVEL-1 AS HOUR
    FROM DUAL 
    CONNECT BY LEVEL<=24
)A LEFT JOIN ANIMAL_OUTS O
ON A.HOUR = TO_CHAR(O.DATETIME,'HH24')
GROUP BY HOUR
ORDER BY HOUR;

#이름이 없는 동물의 아이디
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NULL
ORDER BY ANIMAL_ID ASC;

#이름이 있는 동물의 아이디
SELECT ANIMAL_ID
FROM ANIMAL_INS
WHERE NAME IS NOT NULL
ORDER BY ANIMAL_ID ASC;

#NULL 처리하기
SELECT ANIMAL_TYPE, IFNULL(NAME, "No name") AS NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

SELECT ANIMAL_TYPE, NVL(NAME, "No name") AS NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

#없어진 기록 찾기
SELECT OUTS.ANIMAL_ID, OUTS.NAME
FROM ANIMAL_OUTS OUTS
LEFT OUTER JOIN ANIMAL_INS INS
ON OUTS.ANIMAL_ID = INS.ANIMAL_ID
WHERE INS.DATETIME IS NULL
ORDER BY OUTS.ANIMAL_ID;

#있었는데요 없었습니다
SELECT INS.ANIMAL_ID, INS.NAME
FROM ANIMAL_INS INS
INNER JOIN ANIMAL_OUTS OUTS
ON INS.ANIMAL_ID = OUTS.ANIMAL_ID
WHERE INS.DATETIME>OUTS.DATETIME
ORDER BY INS.DATETIME;

SELECT * 
FROM ( SELECT INS.NAME, INS.DATETIME 
      FROM ANIMAL_INS INS 
      LEFT OUTER JOIN ANIMAL_OUTS OUTS 
      ON INS.ANIMAL_ID = OUTS.ANIMAL_ID 
      WHERE OUTS.ANIMAL_ID IS NULL 
      ORDER BY INS.DATETIME ) 
WHERE ROWNUM <= 3;

#보호소에서 중성화한 동물
SELECT INS.ANIMAL_ID, INS.ANIMAL_TYPE, INS.NAME
FROM ANIMAL_INS INS
INNER JOIN ANIMAL_OUTS OUTS
ON INS.ANIMAL_ID = OUTS.ANIMAL_ID
WHERE INS.SEX_UPON_INTAKE LIKE 'Intact%' 
AND OUTS.SEX_UPON_OUTCOME NOT LIKE 'Intact%'
ORDER BY INS.ANIMAL_ID;

#루시와 엘라 찾기
SELECT ANIMAL_ID, NAME, SEX_UPON_INTAKE
FROM ANIMAL_INS
WHERE NAME IN ('Lucy','Ella','Pickle','Rogan','Sabrina','Mitty')
ORDER BY ANIMAL_ID;

#이름에 el이 들어가는 동물 찾기
SELECT ANIMAL_ID, NAME
FROM ANIMAL_INS
WHERE ANIMAL_TYPE = 'Dog' 
AND LOWER(NAME) LIKE '%el%'
ORDER BY NAME;

#중성화 여부 파악하기
SELECT ANIMAL_ID, NAME, 
CASE 
WHEN SEX_UPON_INTAKE LIKE '%Neutered%' 
OR SEX_UPON_INTAKE LIKE '%Spayed%'
THEN 'O' 
ELSE 'X'
END
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

#오랜기간 보호한 동물
SELECT INS.ANIMAL_ID, INS.NAME 
FROM ANIMAL_INS INS
JOIN ANIMAL_OUTS OUTS
ON INS.ANIMAL_ID = OUTS.ANIMAL_ID 
ORDER BY OUTS.DATETIME - INS.DATETIME DESC
LIMIT 2;

SELECT ANIMAL_ID, NAME
FROM ( SELECT INS.ANIMAL_ID, INS.NAME 
      FROM ANIMAL_INS INS
      JOIN ANIMAL_OUTS OUTS
      ON INS.ANIMAL_ID = OUTS.ANIMAL_ID 
      ORDER BY OUTS.DATETIME - INS.DATETIME DESC ) 
WHERE ROWNUM <= 2;

#DATETIME에서 DATE로 형 변환
SELECT ANIMAL_ID, NAME, DATE_FORMAT(DATETIME, '%Y-%m-%d')
FROM ANIMAL_INS
ORDER BY ANIMAL_ID;

SELECT ANIMAL_ID, NAME, TO_CHAR(DATETIME, 'YYYY-MM-DD') 
FROM ANIMAL_INS 
ORDER BY ANIMAL_ID;